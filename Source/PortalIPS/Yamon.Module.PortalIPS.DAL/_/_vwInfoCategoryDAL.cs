
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由亚萌智能表单代码生成工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。除非此项目不再使用代码生成器生成。
//     如果想修改此文件的方法，请在此文件的上级目录中的vwInfoCategoryDAL重写(override)该方法。
//     如有问题联系zongeasy@qq.com
//
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.ComponentModel;
using Yamon.Framework.DBUtility;
using System.Collections;
using Yamon.Framework.Common.DataBase;
using Yamon.Framework.Common;
using Yamon.Framework.Common.IO;
using System.IO;
using System.Linq.Expressions;
using Yamon.Framework.DAL;
using Yamon.Module.PortalIPS.Entity;

namespace Yamon.Module.PortalIPS.DAL
{
    /// <summary>
    /// 信息内容视图实体类
    ///</summary>
    public partial class _vwInfoCategoryDAL : BaseModelDAL<vwInfoCategory>
    {
        public _vwInfoCategoryDAL():base("UCenter")
        {
        }

		/// <summary>
        /// 信息类型（InfoType）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_InfoType
		{
			get
			{
			    Yamon.Module.PortalIPS.DAL.InfoTypeDAL dal = new Yamon.Module.PortalIPS.DAL.InfoTypeDAL();
                string cacheKey = dal.CacheKeyPrefix + "NameValue_InfoType";
                object obj=CacheHelper.Get(cacheKey);
                if (obj == null)
                {
                   obj= dal.GetAllEntityTable("InfoTypeName,InfoTypeDisplayName").ToNameValueCollection();
                   CacheHelper.Insert(cacheKey,obj);
                }
                return (MyNameValueCollection) obj;

			}
		}
		/// <summary>
        /// 是否有效（BackBoolean）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_BackBoolean
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("True", "是");
                nv.Add("False", "否");
                return nv;

			}
		}
		/// <summary>
        /// 状态（Status）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_Status
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("SAVED", "草稿");
                nv.Add("SUBMITTED", "待审核");
                nv.Add("REFUSED", "审核不通过");
                nv.Add("DELETED", "已删除");
                nv.Add("CHECKED", "已审核");
                return nv;

			}
		}
		/// <summary>
        /// 是否启用（Flag）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_Flag
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("1", "是");
                nv.Add("0", "否");
                return nv;

			}
		}



		/// <summary>
		/// 获取数据实体列表(过滤字段CategoryID)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityList_CategoryID(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] { RequestHelper.GetString("CategoryID") };
            return GetEntityList("1=1 And CategoryID=? ",arrParams, "BackInt asc,ShowTime desc,CreateTime desc", topN,fields);
        }
		
		/// <summary>
		/// 获取数据实体列表(过滤字段CategoryID)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetAllEntityList_CategoryID(string fields="")
        {
            return GetEntityList_CategoryID(0,fields);
        }
		
		/// <summary>
		/// 获取分页的数据实体列表(过滤字段CategoryID)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityListByPage_CategoryID(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "BackInt asc,ShowTime desc,CreateTime desc";
			if (!string.IsNullOrEmpty(orderBy))
			{
			   order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] { RequestHelper.GetString("CategoryID") };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityListByPage("1=1 And CategoryID=? "+ where, arrParams,order,fields ,rows,page,topN,out totalRows);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(过滤字段CategoryID)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetEntityTable_CategoryID(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] { RequestHelper.GetString("CategoryID") };
            return GetEntityTable("1=1 And CategoryID=? ",arrParams, "BackInt asc,ShowTime desc,CreateTime desc", topN,fields);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(过滤字段CategoryID)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetAllEntityTable_CategoryID(string fields="")
        {
        	return GetEntityTable_CategoryID(0,fields);
        }
		/// <summary>
		/// 获取分页的数据列表DataTable(过滤字段CategoryID)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
        public virtual DataTable GetEntityTableByPage_CategoryID(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "BackInt asc,ShowTime desc,CreateTime desc";
			if (!string.IsNullOrEmpty(orderBy))
			{
			    order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] { RequestHelper.GetString("CategoryID") };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityTableByPage("1=1 And CategoryID=? "+ where, arrParams,order,fields, rows,page,topN,out totalRows);
        }
		/// <summary>
		/// 获取数据实体列表(回收站)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityList_Deleted(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] {  };
            return GetEntityList("1=1 AND 1=1 ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据实体列表(回收站)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetAllEntityList_Deleted(string fields="")
        {
            return GetEntityList_Deleted(0,fields);
        }
		
		/// <summary>
		/// 获取分页的数据实体列表(回收站)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityListByPage_Deleted(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			   order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] {  };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityListByPage("1=1 AND 1=1 "+ where, arrParams,order,fields ,rows,page,topN,out totalRows);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(回收站)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetEntityTable_Deleted(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] {  };
            return GetEntityTable("1=1 AND 1=1 ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(回收站)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetAllEntityTable_Deleted(string fields="")
        {
        	return GetEntityTable_Deleted(0,fields);
        }
		/// <summary>
		/// 获取分页的数据列表DataTable(回收站)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
        public virtual DataTable GetEntityTableByPage_Deleted(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			    order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] {  };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityTableByPage("1=1 AND 1=1 "+ where, arrParams,order,fields, rows,page,topN,out totalRows);
        }
		/// <summary>
		/// 获取数据实体列表(信息内容过滤)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityList_InfoGuid(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] { RequestHelper.GetString("CategoryID"),RequestHelper.GetString("ID").Replace(",","','") };
            return GetEntityList("1=1 And CategoryID=? AND InfoGuid in (?) ",arrParams, "BackInt asc,ShowTime desc,CreateTime desc", topN,fields);
        }
		
		/// <summary>
		/// 获取数据实体列表(信息内容过滤)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetAllEntityList_InfoGuid(string fields="")
        {
            return GetEntityList_InfoGuid(0,fields);
        }
		
		/// <summary>
		/// 获取分页的数据实体列表(信息内容过滤)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityListByPage_InfoGuid(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "BackInt asc,ShowTime desc,CreateTime desc";
			if (!string.IsNullOrEmpty(orderBy))
			{
			   order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] { RequestHelper.GetString("CategoryID"),RequestHelper.GetString("ID").Replace(",","','") };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityListByPage("1=1 And CategoryID=? AND InfoGuid in (?) "+ where, arrParams,order,fields ,rows,page,topN,out totalRows);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(信息内容过滤)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetEntityTable_InfoGuid(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] { RequestHelper.GetString("CategoryID"),RequestHelper.GetString("ID").Replace(",","','") };
            return GetEntityTable("1=1 And CategoryID=? AND InfoGuid in (?) ",arrParams, "BackInt asc,ShowTime desc,CreateTime desc", topN,fields);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(信息内容过滤)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetAllEntityTable_InfoGuid(string fields="")
        {
        	return GetEntityTable_InfoGuid(0,fields);
        }
		/// <summary>
		/// 获取分页的数据列表DataTable(信息内容过滤)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
        public virtual DataTable GetEntityTableByPage_InfoGuid(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "BackInt asc,ShowTime desc,CreateTime desc";
			if (!string.IsNullOrEmpty(orderBy))
			{
			    order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] { RequestHelper.GetString("CategoryID"),RequestHelper.GetString("ID").Replace(",","','") };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityTableByPage("1=1 And CategoryID=? AND InfoGuid in (?) "+ where, arrParams,order,fields, rows,page,topN,out totalRows);
        }
		/// <summary>
		/// 获取数据实体列表(发布信息)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityList_MyAuditInfo(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] {  };
            return GetEntityList("1=1 AND 1=1 ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据实体列表(发布信息)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetAllEntityList_MyAuditInfo(string fields="")
        {
            return GetEntityList_MyAuditInfo(0,fields);
        }
		
		/// <summary>
		/// 获取分页的数据实体列表(发布信息)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityListByPage_MyAuditInfo(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			   order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] {  };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityListByPage("1=1 AND 1=1 "+ where, arrParams,order,fields ,rows,page,topN,out totalRows);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(发布信息)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetEntityTable_MyAuditInfo(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] {  };
            return GetEntityTable("1=1 AND 1=1 ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(发布信息)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetAllEntityTable_MyAuditInfo(string fields="")
        {
        	return GetEntityTable_MyAuditInfo(0,fields);
        }
		/// <summary>
		/// 获取分页的数据列表DataTable(发布信息)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
        public virtual DataTable GetEntityTableByPage_MyAuditInfo(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			    order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] {  };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityTableByPage("1=1 AND 1=1 "+ where, arrParams,order,fields, rows,page,topN,out totalRows);
        }
		/// <summary>
		/// 获取数据实体列表(我的审核)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityList_MyCheckedInfo(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] {  };
            return GetEntityList("1=1 AND 1=1 ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据实体列表(我的审核)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetAllEntityList_MyCheckedInfo(string fields="")
        {
            return GetEntityList_MyCheckedInfo(0,fields);
        }
		
		/// <summary>
		/// 获取分页的数据实体列表(我的审核)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityListByPage_MyCheckedInfo(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			   order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] {  };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityListByPage("1=1 AND 1=1 "+ where, arrParams,order,fields ,rows,page,topN,out totalRows);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(我的审核)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetEntityTable_MyCheckedInfo(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] {  };
            return GetEntityTable("1=1 AND 1=1 ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(我的审核)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetAllEntityTable_MyCheckedInfo(string fields="")
        {
        	return GetEntityTable_MyCheckedInfo(0,fields);
        }
		/// <summary>
		/// 获取分页的数据列表DataTable(我的审核)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
        public virtual DataTable GetEntityTableByPage_MyCheckedInfo(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			    order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] {  };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityTableByPage("1=1 AND 1=1 "+ where, arrParams,order,fields, rows,page,topN,out totalRows);
        }
		/// <summary>
		/// 获取数据实体列表(我的信息)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityList_MyInfo(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] {  };
            return GetEntityList("1=1 AND 1=1 ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据实体列表(我的信息)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetAllEntityList_MyInfo(string fields="")
        {
            return GetEntityList_MyInfo(0,fields);
        }
		
		/// <summary>
		/// 获取分页的数据实体列表(我的信息)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
        public virtual List<vwInfoCategory> GetEntityListByPage_MyInfo(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			   order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] {  };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityListByPage("1=1 AND 1=1 "+ where, arrParams,order,fields ,rows,page,topN,out totalRows);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(我的信息)
		///</summary>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetEntityTable_MyInfo(int topN = 0,string fields="")
        {
            object[] arrParams = new object[] {  };
            return GetEntityTable("1=1 AND 1=1 ",arrParams, "", topN,fields);
        }
		
		/// <summary>
		/// 获取数据列表DataTable(我的信息)
		///</summary>
		/// <param name="fields">查询的字段</param>
		/// <returns>数据列表</returns>
        public virtual DataTable GetAllEntityTable_MyInfo(string fields="")
        {
        	return GetEntityTable_MyInfo(0,fields);
        }
		/// <summary>
		/// 获取分页的数据列表DataTable(我的信息)
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
        public virtual DataTable GetEntityTableByPage_MyInfo(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
        {
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
			    order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			object[] arrParams = new object[] {  };
            arrParams=arrParams.Concat(searchParams).ToArray();
            string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
            return GetEntityTableByPage("1=1 AND 1=1 "+ where, arrParams,order,fields, rows,page,topN,out totalRows);
        }

		/// <summary>
		/// 获取分页的数据实体列表
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
		public virtual List<vwInfoCategory> GetEntityListByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
			return GetEntityListByPage("1=1 "+ where, searchParams,order,fields, rows,page,topN,out totalRows);
		}

		/// <summary>
		/// 获取分页的数据列表DataTable
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
		public virtual DataTable GetEntityTableByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="InfoGuid,ID,Title,ShowTime,InfoType,CreatorName,BackBoolean1,Status,LastModifyTime,AuditorName,GroupName,BackInt,CategoryID,CategoryName";
			return GetEntityTableByPage("1=1 "+ where, searchParams,order,fields,rows,page,topN,out totalRows);
		}

		/// <summary>
        /// 拼接查询Sql语句及参数
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="notIn">排除字段</param>
        /// <param name="arrParam">out查询参数</param>
        /// <returns>查询Sql语句</returns>
		public virtual string GetSearchSql(string notIn,out object[] arrParam)
		{
			StringBuilder sb=new StringBuilder();
			string value="";
			string value1 = "";
			string value2 = "";
			ArrayList param=new ArrayList();
			
			
			//Title
			if (!("," + notIn.ToLower() + ",").Contains(",title,"))
			{
			value = RequestHelper.GetString("Title");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			       		sb.Append(" AND [`Title`] like ?");
			       		param.Add("%"+ arrValue[i]+"%");
			        }
			    }
			    else
			    {
			          sb.Append(" AND [`Title`] like ?");
			          param.Add("%"+ value+"%");
			    }
			}
			}
			
			
			//Status
			if (!("," + notIn.ToLower() + ",").Contains(",status,"))
			{
			value = RequestHelper.GetString("Status");
			if (!string.IsNullOrEmpty(value))
			{
			    string[] arrValue = value.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
			    if (arrValue.Length > 1)
			    {
			        for (int i = 0; i < arrValue.Length; i++)
			        {
			       		sb.Append(" AND [`Status`] like ?");
			       		param.Add("%"+ arrValue[i]+"%");
			        }
			    }
			    else
			    {
			          sb.Append(" AND [`Status`] like ?");
			          param.Add("%"+ value+"%");
			    }
			}
			}
			arrParam=param.ToArray();
			return sb.ToString();

		}

		
	    public virtual vwInfoCategory GetModelValue(vwInfoCategory model)
        {
            return model;
        }
		/// <summary>
        /// 设置信息内容视图实体(vwInfoCategory)的显示值
        /// </summary>
        /// <param name="model">信息内容视图实体(vwInfoCategory)</param>
        /// <returns>信息内容视图实体(vwInfoCategory)</returns>
		public virtual vwInfoCategory GetModelShowValue(vwInfoCategory model,bool clearValue=false)
        {
            model=GetModelValue(model);
		if (model.ShowTime!=null)
		{
			model.ShowTime_ShowValue=((DateTime)model.ShowTime).ToString("yyyy-MM-dd");
		}
			if (model.InfoType!=null)
			{
				model.InfoType_ShowValue=NameValue_InfoType.Get(model.InfoType.ToString());
			}
			if (model.BackBoolean!=null)
			{
				model.BackBoolean_ShowValue=NameValue_BackBoolean.Get(model.BackBoolean.ToString());
			}
			if (model.Status!=null)
			{
				model.Status_ShowValue=NameValue_Status.Get(model.Status.ToString());
			}
			if (model.Flag!=null)
			{
				model.Flag_ShowValue=NameValue_Flag.Get(model.Flag.ToString());
			}
			if(clearValue)
			{
				model.ShowTime = null;
				model.InfoType = null;
				model.BackBoolean = null;
				model.Status = null;
				model.Flag = null;
			}
			return model;
		}
		
		/// <summary>
        /// 设置信息内容视图实体(vwInfoCategory)的列表显示值
        /// </summary>
        /// <param name="model">信息内容视图实体(vwInfoCategory)</param>
        /// <returns>信息内容视图实体(vwInfoCategory)</returns>
		public virtual vwInfoCategory GetModelGridShowValue(vwInfoCategory model){
			model=GetModelShowValue(model);
			return model;
        }

        public virtual vwInfoCategory GetInfoByID(object id){
            vwInfoCategory model = GetModelByID(id);
            model = GetModelShowValue(model);
            return model;
        } 


      #region 新建相关方法
		/// <summary>
        /// 设置新增入库时信息内容视图实体(vwInfoCategory)默认值
        /// </summary>
        /// <param name="model">信息内容视图实体(vwInfoCategory)</param>
        /// <returns>信息内容视图实体(vwInfoCategory)</returns>
		public virtual vwInfoCategory GetInsertModelValue(vwInfoCategory model)
		{
			model.InfoGuid = "GUID";
			model.ID =null;
			model.CreateTime =DateTime.Now;
			model.Status = "SAVED";
			model.LastModifier =CookieHelper.GetCookie("UserName");
			model.LastModifierName =CookieHelper.GetCookie("TrueName");
			model.Auditor =CookieHelper.GetCookie("UserName");
			model.AuditorName =CookieHelper.GetCookie("TrueName");
			model.AuditTime =DateTime.Now;
			model.Publisher =CookieHelper.GetCookie("UserName");
			model.PublishTime =DateTime.Now;
			return model;
		}		/// <summary>
        /// 设置新建页面的信息内容视图实体(vwInfoCategory)默认值
        /// </summary>
        /// <param name="model">信息内容视图实体(vwInfoCategory)</param>
        /// <returns>信息内容视图实体(vwInfoCategory)</returns>
		public virtual vwInfoCategory GetCreateFormDefaultValue()
		{
            vwInfoCategory model = new vwInfoCategory();
			model.InfoGuid="GUID";
			model.ShowTime=DateTime.Now;
			model.Author=CookieHelper.GetCookie("TrueName");
			model.Status="SAVED";
			model.PublisherName=CookieHelper.GetCookie("TrueName");
            return model;
		}

		/// <summary>
        /// 新建数据格式验证
        /// </summary>
        /// <param name="model">信息内容视图实体(vwInfoCategory)</param>
        public virtual void CreateFormValidator(vwInfoCategory model)
        {
			string value="";
			
			//InfoGuid验证
			value = model.InfoGuid!=null ? model.InfoGuid.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("ID不能为空！");
		            }
			
			//Title验证
			value = model.Title!=null ? model.Title.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("标题不能为空！");
		            }
			
			//InfoType验证
			value = model.InfoType!=null ? model.InfoType.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("信息类型不能为空！");
		            }
			
			//CreateTime验证
			value = model.CreateTime!=null ? model.CreateTime.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("创建时间不能为空！");
		            }
			
			//GroupID验证
			value = model.GroupID!=null ? model.GroupID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("创建部门编号不能为空！");
		            }
			
			//ViewCount_Info验证
			value = model.ViewCount_Info!=null ? model.ViewCount_Info.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("访问次数不能为空！");
		            }
			
			//AppID验证
			value = model.AppID!=null ? model.AppID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("AppID不能为空！");
		            }
			
			//GroupName验证
			value = model.GroupName!=null ? model.GroupName.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("创建部门不能为空！");
		            }
			
			//ViewCount验证
			value = model.ViewCount!=null ? model.ViewCount.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("点击次数不能为空！");
		            }
			
			//JournalID验证
			value = model.JournalID!=null ? model.JournalID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("日志ID不能为空！");
		            }
			
			//CategoryID验证
			value = model.CategoryID!=null ? model.CategoryID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("栏目ID不能为空！");
		            }
			
			//CategoryName验证
			value = model.CategoryName!=null ? model.CategoryName.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("所属栏目不能为空！");
		            }
			
			//DisplayName验证
			value = model.DisplayName!=null ? model.DisplayName.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("显示名称不能为空！");
		            }
			
			//CategoryType验证
			value = model.CategoryType!=null ? model.CategoryType.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("栏目类型不能为空！");
		            }
			
			//IsJournal验证
			value = model.IsJournal!=null ? model.IsJournal.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("是否创建日志不能为空！");
		            }
			
			//ParentID验证
			value = model.ParentID!=null ? model.ParentID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("父级ID不能为空！");
		            }
			
			//Flag验证
			value = model.Flag!=null ? model.Flag.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("是否启用不能为空！");
		            }
			
			//OrderNum验证
			value = model.OrderNum!=null ? model.OrderNum.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("排序ID不能为空！");
		            }
}
      #endregion

      #region 修改相关方法
		/// <summary>
        /// 设置更新入库时信息内容视图实体(vwInfoCategory)默认值
        /// </summary>
        /// <param name="model">信息内容视图实体(vwInfoCategory)</param>
        /// <returns>信息内容视图实体(vwInfoCategory)</returns>
		public virtual vwInfoCategory GetUpdateModelValue(vwInfoCategory model)
		{
			model.InfoGuid =null;
			model.GroupID =null;
			model.CategoryID =null;
			return model;
		}		/// <summary>
        /// 设置编辑页面的信息内容视图实体(vwInfoCategory)默认值
        /// </summary>
        /// <param name="model">信息内容视图实体(vwInfoCategory)</param>
        /// <returns>信息内容视图实体(vwInfoCategory)</returns>
		public virtual vwInfoCategory GetEditFormDefaultValue(vwInfoCategory model)
		{
			return model;
		}

		/// <summary>
        /// 编辑数据格式验证
        /// </summary>
        /// <param name="model">信息内容视图实体(vwInfoCategory)</param>
        public virtual void EditFormValidator(vwInfoCategory model)
        {
			string value="";
			
			//Title验证
			value = model.Title!=null ? model.Title.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("标题不能为空！");
		            }
			
			//InfoType验证
			value = model.InfoType!=null ? model.InfoType.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("信息类型不能为空！");
		            }
			
			//CreateTime验证
			value = model.CreateTime!=null ? model.CreateTime.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("创建时间不能为空！");
		            }
			
			//ViewCount_Info验证
			value = model.ViewCount_Info!=null ? model.ViewCount_Info.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("访问次数不能为空！");
		            }
			
			//AppID验证
			value = model.AppID!=null ? model.AppID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("AppID不能为空！");
		            }
			
			//GroupName验证
			value = model.GroupName!=null ? model.GroupName.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("创建部门不能为空！");
		            }
			
			//ViewCount验证
			value = model.ViewCount!=null ? model.ViewCount.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("点击次数不能为空！");
		            }
			
			//JournalID验证
			value = model.JournalID!=null ? model.JournalID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("日志ID不能为空！");
		            }
			
			//CategoryName验证
			value = model.CategoryName!=null ? model.CategoryName.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("所属栏目不能为空！");
		            }
			
			//DisplayName验证
			value = model.DisplayName!=null ? model.DisplayName.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("显示名称不能为空！");
		            }
			
			//CategoryType验证
			value = model.CategoryType!=null ? model.CategoryType.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("栏目类型不能为空！");
		            }
			
			//IsJournal验证
			value = model.IsJournal!=null ? model.IsJournal.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("是否创建日志不能为空！");
		            }
			
			//ParentID验证
			value = model.ParentID!=null ? model.ParentID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("父级ID不能为空！");
		            }
			
			//Flag验证
			value = model.Flag!=null ? model.Flag.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("是否启用不能为空！");
		            }
			
			//OrderNum验证
			value = model.OrderNum!=null ? model.OrderNum.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("排序ID不能为空！");
		            }
}
      #endregion

    }
}
