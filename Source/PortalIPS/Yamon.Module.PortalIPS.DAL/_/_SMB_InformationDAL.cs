
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由亚萌智能表单代码生成工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。除非此项目不再使用代码生成器生成。
//     如果想修改此文件的方法，请在此文件的上级目录中的SMB_InformationDAL重写(override)该方法。
//     如有问题联系zongeasy@qq.com
//
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.ComponentModel;
using Yamon.Framework.DBUtility;
using System.Collections;
using Yamon.Framework.Common.DataBase;
using Yamon.Framework.Common;
using Yamon.Framework.Common.IO;
using System.IO;
using System.Linq.Expressions;
using Yamon.Framework.DAL;
using Yamon.Module.PortalIPS.Entity;

namespace Yamon.Module.PortalIPS.DAL
{
    /// <summary>
    /// 信息内容实体类
    ///</summary>
    public partial class _SMB_InformationDAL : BaseModelDAL<SMB_Information>
    {
        public _SMB_InformationDAL():base("UCenter")
        {
        }

		/// <summary>
        /// 所属栏目（CategoryID）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_CategoryID
		{
			get
			{
			    Yamon.Module.PortalIPS.DAL.CategoryDAL dal = new Yamon.Module.PortalIPS.DAL.CategoryDAL();
                string cacheKey = dal.CacheKeyPrefix + "NameValue_Category";
                object obj=CacheHelper.Get(cacheKey);
                if (obj == null)
                {
                   obj= dal.GetAllEntityTable("ParentID,DisplayName").ToNameValueCollection();
                   CacheHelper.Insert(cacheKey,obj);
                }
                return (MyNameValueCollection) obj;

			}
		}
		/// <summary>
        /// 信息类型（InfoType）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_InfoType
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("CommonInfo", "文字视频信息");
                nv.Add("audioInfo", "音频信息");
                nv.Add("LinkInfo", "外部链接");
                return nv;

			}
		}
		/// <summary>
        /// 状态（Status）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_Status
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("SAVED", "草稿");
                nv.Add("SUBMITTED", "待审核");
                nv.Add("REFUSED", "审核不通过");
                nv.Add("DELETED", "已删除");
                nv.Add("CHECKED", "已审核");
                return nv;

			}
		}
		/// <summary>
        /// 突出显示（BackBoolean1）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_BackBoolean1
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("0", "否");
                nv.Add("1", "是");
                return nv;

			}
		}
		/// <summary>
        /// 是否列表显示（BackInt3）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_BackInt3
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("0", "是");
                nv.Add("1", "否");
                return nv;

			}
		}




		/// <summary>
		/// 获取分页的数据实体列表
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
		public virtual List<SMB_Information> GetEntityListByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="InfoGuid,SourceUrl,InfoType,AuditorName,BackNvarchar3,Title,BackNvarchar,SubTitle,AppID,ShowTime,Author,Source,Keywords,MediaFileName,Creator,CreatorName,CreateTime,GroupID,GroupName,LastModifier,LastModifierName,Description,LastModifyTime,ContentNoHTML,Auditor,AuditTime,Status,ViewCount,SendToUserNames,SendToGroupNames,BackBoolean,BackBoolean1,BackInt,BackNvarchar1,BackInt1,BackInt2,BackInt3,IconName,PageName,TalkGuid,VideoUrl,Content";
			return GetEntityListByPage("1=1 "+ where, searchParams,order,fields, rows,page,topN,out totalRows);
		}

		/// <summary>
		/// 获取分页的数据列表DataTable
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
		public virtual DataTable GetEntityTableByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="InfoGuid,SourceUrl,InfoType,AuditorName,BackNvarchar3,Title,BackNvarchar,SubTitle,AppID,ShowTime,Author,Source,Keywords,MediaFileName,Creator,CreatorName,CreateTime,GroupID,GroupName,LastModifier,LastModifierName,Description,LastModifyTime,ContentNoHTML,Auditor,AuditTime,Status,ViewCount,SendToUserNames,SendToGroupNames,BackBoolean,BackBoolean1,BackInt,BackNvarchar1,BackInt1,BackInt2,BackInt3,IconName,PageName,TalkGuid,VideoUrl,Content";
			return GetEntityTableByPage("1=1 "+ where, searchParams,order,fields,rows,page,topN,out totalRows);
		}

		/// <summary>
        /// 拼接查询Sql语句及参数
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="notIn">排除字段</param>
        /// <param name="arrParam">out查询参数</param>
        /// <returns>查询Sql语句</returns>
		public virtual string GetSearchSql(string notIn,out object[] arrParam)
		{
			StringBuilder sb=new StringBuilder();
			string value="";
			string value1 = "";
			string value2 = "";
			ArrayList param=new ArrayList();
			arrParam=param.ToArray();
			return sb.ToString();

		}

		
	    public virtual SMB_Information GetModelValue(SMB_Information model)
        {
            return model;
        }
		/// <summary>
        /// 设置信息内容实体(SMB_Information)的显示值
        /// </summary>
        /// <param name="model">信息内容实体(SMB_Information)</param>
        /// <returns>信息内容实体(SMB_Information)</returns>
		public virtual SMB_Information GetModelShowValue(SMB_Information model,bool clearValue=false)
        {
            model=GetModelValue(model);
			if (model.CategoryID!=null)
			{
				model.CategoryID_ShowValue=NameValue_CategoryID.GetValues(model.CategoryID.ToString());
			}
			if (model.InfoType!=null)
			{
				model.InfoType_ShowValue=NameValue_InfoType.Get(model.InfoType.ToString());
			}
		if (model.ShowTime!=null)
		{
			model.ShowTime_ShowValue=((DateTime)model.ShowTime).ToString("yyyy-MM-dd");
		}
			if (model.Status!=null)
			{
				model.Status_ShowValue=NameValue_Status.Get(model.Status.ToString());
			}
			if (model.BackBoolean1!=null)
			{
				model.BackBoolean1_ShowValue=NameValue_BackBoolean1.Get(model.BackBoolean1.ToString());
			}
			if (model.BackInt3!=null)
			{
				model.BackInt3_ShowValue=NameValue_BackInt3.Get(model.BackInt3.ToString());
			}
			if(clearValue)
			{
				model.CategoryID = null;
				model.InfoType = null;
				model.ShowTime = null;
				model.Status = null;
				model.BackBoolean1 = null;
				model.BackInt3 = null;
				model.Attachment = null;
			}
			return model;
		}
		
		/// <summary>
        /// 设置信息内容实体(SMB_Information)的列表显示值
        /// </summary>
        /// <param name="model">信息内容实体(SMB_Information)</param>
        /// <returns>信息内容实体(SMB_Information)</returns>
		public virtual SMB_Information GetModelGridShowValue(SMB_Information model){
			model=GetModelShowValue(model);
			return model;
        }

        public virtual SMB_Information GetInfoByID(object id){
            SMB_Information model = GetModelByID(id);
            model = GetModelShowValue(model);
            return model;
        } 


      #region 新建相关方法
		/// <summary>
        /// 设置新增入库时信息内容实体(SMB_Information)默认值
        /// </summary>
        /// <param name="model">信息内容实体(SMB_Information)</param>
        /// <returns>信息内容实体(SMB_Information)</returns>
		public virtual SMB_Information GetInsertModelValue(SMB_Information model)
		{
			model.InfoGuid =Guid.NewGuid().ToString();
			model.AuditorName =null;
			model.AppID =CookieHelper.GetCookie("CityID");
			model.Creator =CookieHelper.GetCookie("UserName");
			model.CreatorName =CookieHelper.GetCookie("TrueName");
			model.CreateTime =DateTime.Now;
			model.GroupID =CookieHelper.GetCookie("DepartmentID");
			model.GroupName =CookieHelper.GetCookie("DepartmentName");
			model.LastModifier =CookieHelper.GetCookie("UserName");
			model.LastModifierName =CookieHelper.GetCookie("TrueName");
			model.LastModifyTime =DateTime.Now;
			model.Auditor =null;
			model.AuditTime =null;
			model.Status = "SUBMITTED";
			model.BackBoolean =1;
			return model;
		}		/// <summary>
        /// 设置新建页面的信息内容实体(SMB_Information)默认值
        /// </summary>
        /// <param name="model">信息内容实体(SMB_Information)</param>
        /// <returns>信息内容实体(SMB_Information)</returns>
		public virtual SMB_Information GetCreateFormDefaultValue()
		{
            SMB_Information model = new SMB_Information();
			model.InfoGuid=Guid.NewGuid().ToString();
			model.CategoryID=RequestHelper.GetString("CategoryID");
			model.InfoType="CommonInfo";
			model.AppID=CookieHelper.GetCookie("CityID");
			model.ShowTime=DateTime.Now;
			model.Creator=CookieHelper.GetCookie("UserName");
			model.CreatorName=CookieHelper.GetCookie("TrueName");
			model.GroupID=CookieHelper.GetCookie("DepartmentID");
			model.GroupName=CookieHelper.GetCookie("DepartmentName");
			model.Status="SUBMITTED";
			model.BackBoolean=1;
			model.BackBoolean1=0;
			model.BackInt=0;
			model.BackInt3=0;
            return model;
		}

		/// <summary>
        /// 新建数据格式验证
        /// </summary>
        /// <param name="model">信息内容实体(SMB_Information)</param>
        public virtual void CreateFormValidator(SMB_Information model)
        {
			string value="";
			
			//CategoryID验证
			value = model.CategoryID!=null ? model.CategoryID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("所属栏目不能为空！");
		            }
			
			//InfoType验证
			value = model.InfoType!=null ? model.InfoType.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("信息类型不能为空！");
		            }
			
			//Title验证
			value = model.Title!=null ? model.Title.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("标题不能为空！");
		            }
}
      #endregion

      #region 修改相关方法
		/// <summary>
        /// 设置更新入库时信息内容实体(SMB_Information)默认值
        /// </summary>
        /// <param name="model">信息内容实体(SMB_Information)</param>
        /// <returns>信息内容实体(SMB_Information)</returns>
		public virtual SMB_Information GetUpdateModelValue(SMB_Information model)
		{
			model.AppID =null;
			model.Creator =null;
			model.CreatorName =null;
			model.CreateTime =null;
			model.GroupID =null;
			model.GroupName =null;
			model.LastModifier = CookieHelper.GetCookie("UserName");
			model.LastModifierName = CookieHelper.GetCookie("TrueName");
			model.LastModifyTime = DateTime.Now;
			model.ViewCount =null;
			model.BackBoolean =null;
			return model;
		}		/// <summary>
        /// 设置编辑页面的信息内容实体(SMB_Information)默认值
        /// </summary>
        /// <param name="model">信息内容实体(SMB_Information)</param>
        /// <returns>信息内容实体(SMB_Information)</returns>
		public virtual SMB_Information GetEditFormDefaultValue(SMB_Information model)
		{
			return model;
		}

		/// <summary>
        /// 编辑数据格式验证
        /// </summary>
        /// <param name="model">信息内容实体(SMB_Information)</param>
        public virtual void EditFormValidator(SMB_Information model)
        {
			string value="";
			
			//CategoryID验证
			value = model.CategoryID!=null ? model.CategoryID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("所属栏目不能为空！");
		            }
			
			//InfoType验证
			value = model.InfoType!=null ? model.InfoType.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("信息类型不能为空！");
		            }
			
			//Title验证
			value = model.Title!=null ? model.Title.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("标题不能为空！");
		            }
}
      #endregion

    }
}
